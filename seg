


ï»¿#include <iostream>
#include <vector>
#include <climits>
#include <cmath> // Remove this for fmin

using namespace std;

template <typename T>
class SegmentTree {
private:
    vector<T> arr;
    vector<T> tree;
    vector<T> lazy;
    int n;

    //DECIDES THE FUNCTION OF THE TREE
    T neutralValue = 0;

    T combine(T a, T b)
    {
        return a + b;
    }

    T updateNode(T node, T update, int count)
    {
        return node + update * count;
    }

    T updateLazyNode(T node, T update)
    {
        return node + update;
    }
    //DECIDES THE FUNCTION OF THE TREE

    void buildTree(int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        }
        else {
            int mid = (start + end) / 2;
            int leftChild = 2 * node + 1;
            int rightChild = 2 * node + 2;

            buildTree(leftChild, start, mid);
            buildTree(rightChild, mid + 1, end);

            tree[node] = combine(tree[leftChild], tree[rightChild]);
        }
    }

    void propagate(int node, int start, int end) {
        if (lazy[node] != 0) {

            tree[node] = updateNode(tree[node], lazy[node], end - start + 1);

            if (start != end) {
                int leftChild = 2 * node + 1;
                int rightChild = 2 * node + 2;
                lazy[leftChild] = updateLazyNode(lazy[leftChild], lazy[node]);
                lazy[rightChild] = updateLazyNode(lazy[rightChild], lazy[node]);
            }

            lazy[node] = 0;
        }
    }



    T queryRange(int node, int start, int end, int l, int r) {
        propagate(node, start, end);

        if (r < start || l > end) {
            return neutralValue;
        }

        if (l <= start && end <= r) {
            return tree[node];
        }

        int mid = (start + end) / 2;
        int leftChild = 2 * node + 1;
        int rightChild = 2 * node + 2;

        T valueLeft = queryRange(leftChild, start, mid, l, r);
        T valueRight = queryRange(rightChild, mid + 1, end, l, r);

        return combine(valueLeft, valueRight);
    }

    void updateRange(int node, int start, int end, int l, int r, T value) {

        propagate(node, start, end);

        if (r < start || l > end) {
            return;
        }

        if (l <= start && end <= r) {
            tree[node] = updateNode(tree[node], value, end - start + 1);
            if (start != end) {
                int leftChild = 2 * node + 1;
                int rightChild = 2 * node + 2;
                lazy[leftChild] = updateLazyNode(lazy[leftChild], value);
                lazy[rightChild] = updateLazyNode(lazy[rightChild], value);
            }
            return;
        }

        int mid = (start + end) / 2;
        int leftChild = 2 * node + 1;
        int rightChild = 2 * node + 2;

        updateRange(leftChild, start, mid, l, r, value);
        updateRange(rightChild, mid + 1, end, l, r, value);

        tree[node] = combine(tree[leftChild], tree[rightChild]);
    }

public:
    SegmentTree(const vector<T>& input) {
        n = input.size();
        arr = input;
        tree.resize(4 * n, neutralValue);
        lazy.resize(4 * n, 0);
        buildTree(0, 0, n - 1);
    }

    T query(int l, int r) {
        return queryRange(0, 0, n - 1, l, r);
    }

    T query(int idx) {
        return queryRange(0, 0, n - 1, idx, idx);
    }

    void update(int l, int r, T value) {
        updateRange(0, 0, n - 1, l, r, value);
    }

    void update(int idx, T value) {
        updateRange(0, 0, n - 1, idx, idx, value);
    }0000
};

int main() {
    int n, q;
    cin >> n >> q;
    vector<long long> input;

    while (n--)
    {
        int temp;
        cin >> temp;
        input.push_back(temp);
    }
    SegmentTree<long long> segTree(input);
    while (q--)
    {
        int t;
        cin >> t;
        if (t == 1)
        {
            int a, b, u;
            cin >> a >> b >> u;
            segTree.update(--a, --b, u);
        }
        else
        {
            int k;
            cin >> k;
            cout << segTree.query(--k) << endl;
        }
    }
}
